// <auto-generated />
using System;
using DataLayer.DatabaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(MoneyManagementDbContext))]
    [Migration("20220918033614_InitDomainModels")]
    partial class InitDomainModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomContact", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactEmail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CustomContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.HasKey("Id");

                    b.HasIndex("CustomContactId");

                    b.ToTable("CustomContactEmail", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.ExpenseDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float?>("AmountOfExchangedMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoney")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float?>("ExchangeRate")
                        .HasColumnType("real");

                    b.Property<string>("ExchangedMoneyCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<string>("MoneyCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseDetail", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.IncomeDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float?>("AmountOfExchangedMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoney")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float?>("ExchangeRate")
                        .HasColumnType("real");

                    b.Property<string>("ExchangedMoneyCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("IncomeId")
                        .HasColumnType("bigint");

                    b.Property<string>("MoneyCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("IncomeId");

                    b.ToTable("IncomeDetail", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.LendingPaymentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float?>("AmountOfExchangedMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoney")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float?>("ExchangeRate")
                        .HasColumnType("real");

                    b.Property<string>("ExchangedMoneyCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("LendingId")
                        .HasColumnType("bigint");

                    b.Property<string>("MoneyCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("LendingId");

                    b.ToTable("LendingPaymentDetail", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.LoanPaymentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float?>("AmountOfExchangedMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoney")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float?>("ExchangeRate")
                        .HasColumnType("real");

                    b.Property<string>("ExchangedMoneyCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("LoanId")
                        .HasColumnType("bigint");

                    b.Property<string>("MoneyCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanPaymentDetail", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.MoneyTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UserMoneyTransactionCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserMoneyTransactionCategoryId");

                    b.ToTable("MoneyTransaction", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Role", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("User", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContacts", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("UserId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("UserContacts", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserEmail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEmail", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserInvestmentCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInvestmentCategory", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserMoneyTransactionCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMoneyTransactionCategory", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserRoles", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactExpenseDetail", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.ExpenseDetail");

                    b.Property<long>("CustomContactId")
                        .HasColumnType("bigint");

                    b.HasIndex("CustomContactId");

                    b.ToTable("CustomContactExpenseDetail", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactIncomeDetail", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.IncomeDetail");

                    b.Property<long>("CustomContactId")
                        .HasColumnType("bigint");

                    b.HasIndex("CustomContactId");

                    b.ToTable("CustomContactIncomeDetail", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactLendingPaymentDetail", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.LendingPaymentDetail");

                    b.Property<long>("CustomContactId")
                        .HasColumnType("bigint");

                    b.HasIndex("CustomContactId");

                    b.ToTable("CustomContactLendingPaymentDetail", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactLoanPaymentDetail", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.LoanPaymentDetail");

                    b.Property<long>("CustomContactId")
                        .HasColumnType("bigint");

                    b.HasIndex("CustomContactId");

                    b.ToTable("CustomContactLoanPaymentDetail", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.Person", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.ContactGroup.CustomContact");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("Person", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.Place", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.ContactGroup.CustomContact");

                    b.ToTable("Place", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Expense", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.MoneyTransaction");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.ToTable("Expense", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Income", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.MoneyTransaction");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.ToTable("Income", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Investment", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.MoneyTransaction");

                    b.Property<float?>("AmountOfExchangedMoney")
                        .HasColumnType("real");

                    b.Property<float?>("AmountOfExchangedMoneyEarned")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoneyEarned")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float?>("ExchangeRate")
                        .HasColumnType("real");

                    b.Property<float?>("ExchangeRateOfMoneyEarned")
                        .HasColumnType("real");

                    b.Property<string>("ExchangedMoneyCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ExchangedMoneyEarnedCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<float>("InterestRate")
                        .HasColumnType("real");

                    b.Property<int>("InterestType")
                        .HasColumnType("int");

                    b.Property<string>("MoneyCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("MoneyEarnedCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserInvestmentCategoryId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserInvestmentCategoryId");

                    b.ToTable("Investment", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Lending", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.MoneyTransaction");

                    b.Property<float?>("AmountOfExchangedMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoneyReturned")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float?>("ExchangeRate")
                        .HasColumnType("real");

                    b.Property<string>("ExchangedMoneyCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<float>("InterestRate")
                        .HasColumnType("real");

                    b.Property<int>("InterestType")
                        .HasColumnType("int");

                    b.Property<string>("MoneyCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("MoneyReturnedCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.ToTable("Lending", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Loan", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.MoneyTransaction");

                    b.Property<float?>("AmountOfExchangedMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoney")
                        .HasColumnType("real");

                    b.Property<float>("AmountOfMoneyRepaid")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float?>("ExchangeRate")
                        .HasColumnType("real");

                    b.Property<string>("ExchangedMoneyCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<float>("InterestRate")
                        .HasColumnType("real");

                    b.Property<int>("InterestType")
                        .HasColumnType("int");

                    b.Property<string>("MoneyCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("MoneyRepaidCurrency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.ToTable("Loan", "moneytransaction");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactExpenseDetail", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.ExpenseDetail");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactExpenseDetail", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactIncomeDetail", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.IncomeDetail");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactIncomeDetail", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactLendingPaymentDetail", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.LendingPaymentDetail");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactLendingPaymentDetail", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactLoanPaymentDetail", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.LoanPaymentDetail");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactLoanPaymentDetail", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactDebtor", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.Lending");

                    b.Property<long>("CustomContactId")
                        .HasColumnType("bigint");

                    b.HasIndex("CustomContactId");

                    b.ToTable("CustomContactDebtor", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactInvestment", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.Investment");

                    b.Property<long>("CustomContactId")
                        .HasColumnType("bigint");

                    b.HasIndex("CustomContactId");

                    b.ToTable("CustomContactInvestment", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactLoanOwner", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.Loan");

                    b.Property<long>("CustomContactId")
                        .HasColumnType("bigint");

                    b.HasIndex("CustomContactId");

                    b.ToTable("CustomContactLoanOwner", "contact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactDebtor", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.Lending");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactDebtor", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactInvestment", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.Investment");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactInvestment", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactLoanOwner", b =>
                {
                    b.HasBaseType("DataLayer.DomainModels.TransactionGroup.Loan");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactLoanOwner", "user");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContact", b =>
                {
                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("CustomContacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactEmail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", "CustomContact")
                        .WithMany("CustomContactEmails")
                        .HasForeignKey("CustomContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomContact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.ExpenseDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Expense", "Expense")
                        .WithMany("ExpenseDetails")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.IncomeDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Income", "Income")
                        .WithMany("IncomeDetails")
                        .HasForeignKey("IncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Income");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.LendingPaymentDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Lending", "Lending")
                        .WithMany("LendingPaymentDetails")
                        .HasForeignKey("LendingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lending");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.LoanPaymentDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Loan", "Loan")
                        .WithMany("LoanPaymentDetails")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.MoneyTransaction", b =>
                {
                    b.HasOne("DataLayer.DomainModels.UserGroup.UserMoneyTransactionCategory", "UserMoneyTransactionCategory")
                        .WithMany("MoneyTransactions")
                        .HasForeignKey("UserMoneyTransactionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMoneyTransactionCategory");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContacts", b =>
                {
                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "Contact")
                        .WithMany("Users")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserEmail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserInvestmentCategory", b =>
                {
                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserInvestmentCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserMoneyTransactionCategory", b =>
                {
                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserTransactionCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserRoles", b =>
                {
                    b.HasOne("DataLayer.DomainModels.UserGroup.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactExpenseDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", "CustomContact")
                        .WithMany("CustomContactExpenseDetails")
                        .HasForeignKey("CustomContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.TransactionGroup.ExpenseDetail", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.CustomContactExpenseDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomContact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactIncomeDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", "CustomContact")
                        .WithMany("CustomContactIncomeDetails")
                        .HasForeignKey("CustomContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.TransactionGroup.IncomeDetail", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.CustomContactIncomeDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomContact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactLendingPaymentDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", "CustomContact")
                        .WithMany("CustomContactLendingPaymentDetails")
                        .HasForeignKey("CustomContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.TransactionGroup.LendingPaymentDetail", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.CustomContactLendingPaymentDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomContact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactLoanPaymentDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", "CustomContact")
                        .WithMany("CustomContactLoanPaymentDetails")
                        .HasForeignKey("CustomContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.TransactionGroup.LoanPaymentDetail", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.CustomContactLoanPaymentDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomContact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.Person", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.Person", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.Place", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.Place", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Expense", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.MoneyTransaction", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.TransactionGroup.Expense", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Income", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.MoneyTransaction", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.TransactionGroup.Income", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Investment", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.MoneyTransaction", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.TransactionGroup.Investment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.UserInvestmentCategory", "UserInvestmentCategory")
                        .WithMany("Investments")
                        .HasForeignKey("UserInvestmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInvestmentCategory");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Lending", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.MoneyTransaction", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.TransactionGroup.Lending", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Loan", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.MoneyTransaction", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.TransactionGroup.Loan", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactExpenseDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.ExpenseDetail", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.UserGroup.UserContactExpenseDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactIncomeDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.IncomeDetail", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.UserGroup.UserContactIncomeDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserContactIncomeDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactLendingPaymentDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.LendingPaymentDetail", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.UserGroup.UserContactLendingPaymentDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserContactLendingPaymentDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactLoanPaymentDetail", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.LoanPaymentDetail", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.UserGroup.UserContactLoanPaymentDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserContactLoanPaymentDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactDebtor", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", "CustomContact")
                        .WithMany("CustomContactDebtors")
                        .HasForeignKey("CustomContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Lending", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.CustomContactDebtor", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomContact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactInvestment", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", "CustomContact")
                        .WithMany("CustomContactInvestments")
                        .HasForeignKey("CustomContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Investment", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.CustomContactInvestment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomContact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContactLoanOwner", b =>
                {
                    b.HasOne("DataLayer.DomainModels.ContactGroup.CustomContact", "CustomContact")
                        .WithMany("CustomContactLoanOwners")
                        .HasForeignKey("CustomContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Loan", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.ContactGroup.CustomContactLoanOwner", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomContact");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactDebtor", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Lending", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.UserGroup.UserContactDebtor", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserContactDebtors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactInvestment", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Investment", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.UserGroup.UserContactInvestment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserContactInvestments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserContactLoanOwner", b =>
                {
                    b.HasOne("DataLayer.DomainModels.TransactionGroup.Loan", null)
                        .WithOne()
                        .HasForeignKey("DataLayer.DomainModels.UserGroup.UserContactLoanOwner", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataLayer.DomainModels.UserGroup.User", "User")
                        .WithMany("UserContactLoanOwners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.DomainModels.ContactGroup.CustomContact", b =>
                {
                    b.Navigation("CustomContactDebtors");

                    b.Navigation("CustomContactEmails");

                    b.Navigation("CustomContactExpenseDetails");

                    b.Navigation("CustomContactIncomeDetails");

                    b.Navigation("CustomContactInvestments");

                    b.Navigation("CustomContactLendingPaymentDetails");

                    b.Navigation("CustomContactLoanOwners");

                    b.Navigation("CustomContactLoanPaymentDetails");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.User", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("CustomContacts");

                    b.Navigation("Emails");

                    b.Navigation("UserContactDebtors");

                    b.Navigation("UserContactIncomeDetails");

                    b.Navigation("UserContactInvestments");

                    b.Navigation("UserContactLendingPaymentDetails");

                    b.Navigation("UserContactLoanOwners");

                    b.Navigation("UserContactLoanPaymentDetails");

                    b.Navigation("UserInvestmentCategories");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTransactionCategories");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserInvestmentCategory", b =>
                {
                    b.Navigation("Investments");
                });

            modelBuilder.Entity("DataLayer.DomainModels.UserGroup.UserMoneyTransactionCategory", b =>
                {
                    b.Navigation("MoneyTransactions");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Expense", b =>
                {
                    b.Navigation("ExpenseDetails");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Income", b =>
                {
                    b.Navigation("IncomeDetails");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Lending", b =>
                {
                    b.Navigation("LendingPaymentDetails");
                });

            modelBuilder.Entity("DataLayer.DomainModels.TransactionGroup.Loan", b =>
                {
                    b.Navigation("LoanPaymentDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
